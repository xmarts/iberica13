odoo.define('l10n_pe_edi_pos.model', function(require) {
    var models = require('point_of_sale.models');
    models.load_fields('res.company', ['street','l10n_pe_edi_ose_id']);
    models.load_fields('res.partner', ['l10n_latam_identification_type_id']);
    models.load_fields('pos.config', ['default_partner_id']);

    // Client by default
    // var _super_posmodel = x.PosModel.prototype;
    var _super_order = models.Order.prototype;
    models.Order = models.Order.extend({
        initialize: function(attributes, options) {
            _super_order.initialize.call(this, attributes, options);
            if (this.pos.config.default_partner_id && !this.get_client()) {
                var pos_default_partner = this.pos.config.default_partner_id;
                if (pos_default_partner) {
                    var client = this.pos.db.get_partner_by_id(pos_default_partner[0])
                    if (client) {
                        this.set_client(client);
                    }
                }
            }
        },
    });
    models.PosModel = models.PosModel.extend({
        push_and_invoice_order: function (order) {
            var self = this;
            var invoiced = new Promise(function (resolveInvoiced, rejectInvoiced) {
                if(!order.get_client()){
                    rejectInvoiced({code:400, message:'Missing Customer', data:{}});
                }
                else {
                    var order_id = self.db.add_order(order.export_as_JSON());
    
                    self.flush_mutex.exec(function () {
                        var done =  new Promise(function (resolveDone, rejectDone) {
                            // send the order to the server
                            // we have a 30 seconds timeout on this push.
                            // FIXME: if the server takes more than 30 seconds to accept the order,
                            // the client will believe it wasn't successfully sent, and very bad
                            // things will happen as a duplicate will be sent next time
                            // so we must make sure the server detects and ignores duplicated orders
    
                            var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});
    
                            transfer.catch(function (error) {
                                rejectInvoiced(error);
                                rejectDone();
                            });
                            // on success, get the order id generated by the server
                            transfer.then(function(order_server_id){
                                // generate the pdf and download it
                                if (!order.pos.config.module_account && order.pos.config.invoice_journal_ids && order.pos.config.invoice_journal_ids.length > 0 && order.pos.journals){
                                    if (order_server_id.length && !order.is_to_email()) {
                                    
                                        self.chrome.do_action('point_of_sale.pos_invoice_report',{additional_context:{
                                            active_ids:order_server_id,
                                        }}).then(function () {
                                            resolveInvoiced(order_server_id);
                                            resolveDone();
                                        }).guardedCatch(function (error) {
                                            rejectInvoiced({code:401, message:'Backend Invoice', data:{order: order}});
                                            rejectDone();
                                        });
                                    } 
                                }
                                if (order_server_id.length) {
                                    resolveInvoiced(order_server_id);
                                    resolveDone();
                                } else {
                                    // The order has been pushed separately in batch when
                                    // the connection came back.
                                    // The user has to go to the backend to print the invoice
                                    rejectInvoiced({code:401, message:'Backend Invoice', data:{order: order}});
                                    rejectDone();
                                }
                            });
                            return done;
                        });
                    });
                }
            });
    
            return invoiced;
        },

    });
    
    models.load_models([{
        model: 'account.journal',
        fields: ['name','l10n_latam_document_type_id'],
        domain: function(self) {
            return [
                ['id', 'in', self.config.invoice_journal_ids]
            ]
        },
        loaded: function(self, journals) {
            self.journals = journals;
            self.journal_by_id = {};
            for (var i = 0; i < journals.length; i++) {
                self.journal_by_id[journals[i]['id']] = journals[i];
            }
        },
    },
    {
        model:  'l10n_pe_edi.supplier',
        fields: ['name', 'control_url', 'authorization_message','code'],
        loaded: function(self,suppliers){
            self.suppliers = suppliers;
            self.company.l10n_pe_edi_ose = null;
            for (var i = 0; i < suppliers.length; i++) {
                if (suppliers[i].id === self.company.l10n_pe_edi_ose_id[0]){
                    self.company.l10n_pe_edi_ose = suppliers[i];
                }
            }
        },
    },
    {
        model:  'l10n_latam.identification.type',
        fields: ['name','l10n_pe_vat_code'],
        loaded: function(self,l10n_latam_identification){ 
            self.l10n_latam_identification=l10n_latam_identification;
            self.db.save_l10n_latam_identification(l10n_latam_identification);
           
        }
    },
    {
        model:  'l10n_latam.document.type',
        fields: ['name','code'],
        loaded: function(self,l10n_latam_document){ 
            self.l10n_latam_document=l10n_latam_document;
            self.db.save_l10n_latam_document(l10n_latam_document);
           
        }
    }
    ]);

});